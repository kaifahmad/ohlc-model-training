# Code Generated by Sidekick is for learning and experimentation purposes only.
import pandas as pd
import ta, xgboost as xgb
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import TimeSeriesSplit

df = pd.read_csv("60min.csv", parse_dates=['time'])
df.set_index('time', inplace=True)

# ---------- Feature engineering ----------
df['return_1'] = df['Close'].pct_change()
df['ATR20'] = ta.volatility.average_true_range(df['High'], df['Low'], df['Close'], 20)
df['bb_width'] = ta.volatility.bollinger_hband(df['Close']) - ta.volatility.bollinger_lband(df['Close'])
df['adx'] = ta.trend.adx(df['High'], df['Low'], df['Close'])
# more features ...

# ---------- Target ----------
T = 0.004  # 0.4 % range threshold; tune this!
future_high = df['High'].shift(-1).rolling(2).max()
future_low  = df['Low'].shift(-1).rolling(2).min()
y = ((future_high - df['Close'])/df['Close'] < T) & ((df['Close'] - future_low)/df['Close'] < T)
y = y.astype(int)

df = df.dropna()
X = df.drop(columns=['Open','High','Low','Close','Volume'])  # or keep if helpful

# ---------- Walk-forward ----------
tscv = TimeSeriesSplit(n_splits=5)
scores = []
for train_idx, test_idx in tscv.split(X):
    model = xgb.XGBClassifier(
        n_estimators=300, learning_rate=0.03, max_depth=4,
        subsample=0.8, colsample_bytree=0.8, scale_pos_weight=1.5,
        objective='binary:logistic'
    )
    model.fit(X.iloc[train_idx], y.iloc[train_idx])
    preds = model.predict_proba(X.iloc[test_idx])[:,1]
    scores.append(roc_auc_score(y.iloc[test_idx], preds))
print(f"Mean AUC: {sum(scores)/len(scores):.3f}")
